#include <stdlib.h>
#include <stdio.h>
#include <time.h>
#include <string.h>

#include "DiscreteBCO.h"

#define E_SIZE          50
#define O_SIZE          50

#define SQUARE          4
#define NUM_MOVS        100
#define NUM_SESION      10000

#define NUMAX           3
#define NUMIN           0

/*
    15 - puzzle

    cada posição da flower representa um movimento, pegar uma peça de cima, baixo, direita ou esquerda.

*/

int beginX, beginY;
int puzzle[SQUARE][SQUARE];
int p[SQUARE][SQUARE];
int SizeOfPopulation = E_SIZE+O_SIZE;
Colony *C;

void LoadPuzzle(){

    int i,j;

    FILE *fptr = fopen("puzzle.txt","r");

    for(i=0;i<SQUARE;i++){
        for(j=0;j<SQUARE;j++){
            fscanf(fptr,"%d",&puzzle[i][j]);
            if(puzzle[i][j] == -1){
                beginX = i;
                beginY = j;
            }
        }
    }

}

void CopyPuzzle(){

    int i,j;

    for(i=0;i<SQUARE;i++){
        for(j=0;j<SQUARE;j++)
            p[i][j] = puzzle[i][j];
    }
}

int check(){

    int i,j;

    for(i=0;i<SQUARE;i++){
        for(j=0;j<SQUARE;j++){

            if (p[i][j] == -1 && i == SQUARE-1 && j == SQUARE-1)
                return 1;
            if (p[i][j] != i*SQUARE + j)
                return 0;
        }
    }

    return 1;
}

double EvaluateFlower(Bee *B){

    int i,j;
    int *F          = B->Flower;
    int movs        = 0;
    int x           = beginX;
    int y           = beginY;
    double fitness  = 0;

    CopyPuzzle();

    do{

        int nMovs = 0;
        int tempX = x;
        int tempY = y;

        int up   = (x+1 < SQUARE)  ? nMovs++ : 4;
        int down = (x-1 >= 0)      ? nMovs++ : 4;
        int left = (y-1 >= 0)      ? nMovs++ : 4;
        int right= (y+1 <SQUARE)   ? nMovs++ : 4;

        int action = F[movs]%nMovs;

        if(action == up)        tempX = x + 1;
        else if(action == down) tempX = x - 1;
        else if(action == left) tempY = y - 1;
        else if(action == right)tempY = y + 1;

        p[x][y]          = p[tempX][tempY];
        p[tempX][tempY]  = -1;

        x = tempX;
        y = tempY;

        if(check())
            return (double) NUM_MOVS/(movs);

    }while( ++movs < NUM_MOVS );

    for(i=0;i<SQUARE;i++){
        for(j=0;j<SQUARE;j++){
            int num     = p[i][j];
            int numX    = (num != -1) ? (num/SQUARE) : SQUARE - 1;
            int numY    = (num != -1) ? (num%SQUARE) : SQUARE - 1;
            fitness     += (i-numX)*(i-numX) + (j-numY)*(j-numY);
        }
    }

    return (double) NUM_MOVS/(fitness+NUM_MOVS+1);
}

int TerminationCriteria(Colony *C){

    static int session  = 0;
    double fitness      = C->BestBee->Fitness;

    printf("%lf\n",fitness);

    if( fitness < 1.0 || ++session < NUM_SESION)
        return 1;

    return 0;
}

int main(){

    time_t t;
    srand((unsigned) time(&t));

    LoadPuzzle();

    C = CreateColony(E_SIZE,O_SIZE,NUM_MOVS,NUMAX,NUMIN);
    DiscreteBeeColonyOpt(C,EvaluateFlower,TerminationCriteria);

    CopyPuzzle();

    int *F = C->BestBee->Flower;
    int i,j;
    int movs        = 0;
    int x           = beginX;
    int y           = beginY;

    do{

        int nMovs = 0;
        int tempX = x;
        int tempY = y;

        int up   = (x+1 < SQUARE)   ? nMovs++ : 4;
        int down = (x-1 >= 0)       ? nMovs++ : 4;
        int left = (y-1 >= 0)       ? nMovs++ : 4;
        int right= (y+1 < SQUARE)   ? nMovs++ : 4;

        int action = F[movs]%nMovs;

        for(i=0;i<SQUARE;i++){
            for(j=0;j<SQUARE;j++)
                printf("%d ",p[i][j]);
            printf("\n");
        }
        getchar();

        if(action == up)        tempX = x + 1;
        else if(action == down) tempX = x - 1;
        else if(action == left) tempY = y - 1;
        else if(action == right)tempY = y + 1;

        p[x][y]          = p[tempX][tempY];
        p[tempX][tempY]  = -1;

        x = tempX;
        y = tempY;

        if(check())
            break;

    }while( ++movs < NUM_MOVS );

    for(i=0;i<SQUARE;i++){
        for(j=0;j<SQUARE;j++)
            printf("%d ",p[i][j]);
        printf("\n");
    }

    printf("Movs : %d\n",movs);

    return 0;
}
